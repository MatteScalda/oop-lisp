(def-class ’person nil ’(fields (name "Eve") (age 21 integer)))
(def-class ’student ’(person) ’(fields (name "Eva Lu Ator") (university "Berkeley" string)) ’(methods (talk (&optional (out *standard-output*)) (format out "My name is ~A~%My age is ~D~%" (field this ’name) (field this ’age)))))
(def-class 'prova nil '(fields (persona "" person)) '(methods (talk () (format out "My name is smalulu"))))
(def-class 'prova2 nil '(fields (prova "" prova)))
(defparameter eve (make ’person))
(defparameter s1 (make ’student ’name "Eduardo De Filippo" ’age 108))
(defparameter s2 (make ’student))
(defparameter s3 (make ’student ’age "42")) !!!DA ERRORE!!!
(defparameter p1 (make prova 'persona eve))
(defparameter p2 (make 'prova 'persona s1))
(defparameter p3 (make 'prova2 'prova p1))
(field eve ’age)
(field s2 ’name)
(field* p2 'prova 'persona)



((and (symbolp (caaar instance))
                (equal (intern (symbol-name (caaar instance))) 
                       (intern (symbol-name field-name))) 
                (listp (cdar instance)) 
                (member 'methods (cadddr class-spec (cadr instance)))) 
            (cadddr class-spec (cadr instance)))


((and (symbolp (caar instance)) 
         (equal (intern (symbol-name (caar instance))) 
                (intern (symbol-name field-name)))) 
    (if (null (cdar instance)) "undefined" (cdar instance))) 

                (apply (append (list 'lambda) (list append(list this)) (list(get-method this method-name))) (append (list this) args))
